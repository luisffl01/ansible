---
- name: Buscar archivos con extensiones específicas en todos los discos y guardar reporte por equipo
  hosts: all
  gather_facts: yes
  become: yes

  tasks:
    - name: Crear la carpeta C:\temp si no existe
      win_file:
        path: C:\temp
        state: directory

    - name: Obtener las unidades disponibles en el equipo
      win_shell: |
        Get-PSDrive -PSProvider FileSystem | Where-Object { $_.Free -ne $null } | Select-Object -ExpandProperty Name
      register: drives

    - name: Construir la lista de rutas para buscar
      set_fact:
        search_paths: "{{ drives.stdout_lines | map('regex_replace', '^(.*)$', '\\1:\\\\') | list }}"

    - name: Validar que existan rutas de búsqueda
      fail:
        msg: "No se encontraron unidades disponibles para buscar archivos."
      when: search_paths | length == 0

    - name: Verificar las rutas generadas
      debug:
        var: search_paths

    - name: Buscar archivos con extensiones específicas en todas las unidades
      win_find:
        paths: "{{ search_paths }}"
        patterns:
          - "*.pdf"
        recurse: yes
        age: 0
      register: found_files
      ignore_errors: yes

    - name: Mostrar contenido de los archivos encontrados
      debug:
        var: found_files.files

    - name: Filtrar archivos excluyendo ciertos directorios
      set_fact:
        filtered_files: >
          {{ found_files.files | rejectattr('path', 'search', '^C:\\\\(Windows|Program Files|Program Files \\(x86\\)|$Recycle.Bin)') | list }}

    - name: Validar que todos los archivos tienen los atributos requeridos
      set_fact:
        valid_files: >
          {{ filtered_files | selectattr('path', 'defined') 
                           | selectattr('size', 'defined') 
                           | selectattr('creationtime', 'defined') 
                           | selectattr('lastwritetime', 'defined') 
                           | selectattr('lastaccesstime', 'defined') 
                           | list }}

    - name: Generar archivo CSV con resultados
      win_shell: |
        $header = "Path,Size (bytes),CreationTime,LastWriteTime,LastAccessTime"
        $data = @()
        {{ valid_files | map('to_json') | join("\n") }} | ConvertFrom-Json | ForEach-Object {
          $data += "$($_.path),$($_.size),$($_.creationtime),$($_.lastwritetime),$($_.lastaccesstime)"
        }
        if ($data.Count -eq 0) {
          Write-Output "No se encontraron archivos válidos para incluir en el reporte."
          exit 0
        }
        $hostname = $env:COMPUTERNAME
        $csvPath = "C:\\temp\\${hostname}_file_report.csv"
        $header | Out-File -FilePath $csvPath -Encoding UTF8
        $data | Out-File -FilePath $csvPath -Append -Encoding UTF8
        Write-Output "CSV generado en $csvPath"
      args:
        executable: powershell
      when: valid_files | length > 0

    - name: Registrar mensaje de éxito
      debug:
        msg: "El archivo CSV ha sido generado con el nombre del equipo en C:\\temp\\<equipo>_file_report.csv"
